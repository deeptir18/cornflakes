diff --git a/drivers/net/mlx5/mlx5.c b/drivers/net/mlx5/mlx5.c
index 998846adbe..151c678f16 100644
--- a/drivers/net/mlx5/mlx5.c
+++ b/drivers/net/mlx5/mlx5.c
@@ -2873,6 +2873,41 @@ rte_pmd_mlx5_get_dyn_flag_names(char *names[], unsigned int n)
 	return RTE_DIM(dynf_names);
 }
 
+/**
+ * Dynamically register a region with NIC.
+ * Writes resulting lkey into lkey_out pointer.
+ * @param[in] port_id
+ *   port_id to start looking for device.
+ * @param[in] addr
+ *   starting address to register.
+ * @param[in] length
+ *   length of region to register
+ * @param[in] lkey_out
+ *   pointer to uint32_t to store resulting lkey of region.
+ *
+ * @return
+ *   pointer to ibv_mr if registration was successful; NULL if not.
+ */
+void *rte_pmd_mlx5_manual_reg_mr(uint8_t port_id, void *addr, size_t length, uint32_t *lkey_out)
+{
+    struct rte_eth_dev *dev = &rte_eth_devices[port_id];
+    struct mlx5_priv *priv = dev->data->dev_private;
+    struct ibv_mr *ibv_mr = mlx5_glue->reg_mr(priv->sh->cdev->pd, addr, length, IBV_ACCESS_LOCAL_WRITE);
+    if (ibv_mr && lkey_out) *lkey_out = rte_cpu_to_be_32(ibv_mr->lkey);
+    return ibv_mr;
+}
+
+/**
+ * Dynamically register a region with NIC.
+ * Writes resulting lkey into lkey_out pointer.
+ * @param[in] ibv_mr
+ *   Pointer to ibv_mr for deregistration.
+ */
+void rte_pmd_mlx5_manual_dereg_mr(void *ibv_mr)
+{
+    mlx5_glue->dereg_mr(ibv_mr);
+}
+
 /**
  * Look for the ethernet device belonging to mlx5 driver.
  *
diff --git a/drivers/net/mlx5/mlx5.h b/drivers/net/mlx5/mlx5.h
index 8af84aef50..f0b620b1b5 100644
--- a/drivers/net/mlx5/mlx5.h
+++ b/drivers/net/mlx5/mlx5.h
@@ -1555,6 +1555,12 @@ struct mlx5_priv {
 #endif
 };
 
+struct mlx5_mem_info {
+    uint32_t lkey;
+    uint16_t lkey_present;
+    uint16_t refers_to_another;
+};
+
 #define PORT_ID(priv) ((priv)->dev_data->port_id)
 #define ETH_DEV(priv) (&rte_eth_devices[PORT_ID(priv)])
 
diff --git a/drivers/net/mlx5/mlx5_rx.h b/drivers/net/mlx5/mlx5_rx.h
index e078aaf3dc..3d7e154c3d 100644
--- a/drivers/net/mlx5/mlx5_rx.h
+++ b/drivers/net/mlx5/mlx5_rx.h
@@ -362,6 +362,12 @@ mlx5_rx_mb2mr(struct mlx5_rxq_data *rxq, struct rte_mbuf *mb)
 	uintptr_t addr = (uintptr_t)mb->buf_addr;
 	uint32_t lkey;
 
+    /* If lkey is present in private data of mbuf, return there */
+    struct mlx5_mem_info *m = (struct mlx5_mem_info *)((char *)mb + sizeof(struct rte_mbuf));
+    if (m->lkey_present == 1) {
+        return (uint32_t)m->lkey;
+    }
+
 	/* Linear search on MR cache array. */
 	lkey = mlx5_mr_lookup_lkey(mr_ctrl->cache, &mr_ctrl->mru,
 				   MLX5_MR_CACHE_N, addr);
diff --git a/drivers/net/mlx5/mlx5_rxtx.h b/drivers/net/mlx5/mlx5_rxtx.h
index 876aa14ae6..1d0e1d56e7 100644
--- a/drivers/net/mlx5/mlx5_rxtx.h
+++ b/drivers/net/mlx5/mlx5_rxtx.h
@@ -26,6 +26,7 @@
 #include "mlx5_autoconf.h"
 
 struct mlx5_priv;
+struct mlx5_mem_info;
 
 /* mlx5_rxtx.c */
 
diff --git a/drivers/net/mlx5/rte_pmd_mlx5.h b/drivers/net/mlx5/rte_pmd_mlx5.h
index fbfdd9737b..4f75505c53 100644
--- a/drivers/net/mlx5/rte_pmd_mlx5.h
+++ b/drivers/net/mlx5/rte_pmd_mlx5.h
@@ -66,6 +66,33 @@ int rte_pmd_mlx5_sync_flow(uint16_t port_id, uint32_t domains);
  */
 #define MLX5_EXTERNAL_RX_QUEUE_ID_MIN (UINT16_MAX - 1000 + 1)
 
+/**
+ * Dynamically register a region with NIC.
+ * Writes resulting lkey into lkey_out pointer.
+ * @param[in] port_id
+ *   port_id to start looking for device.
+ * @param[in] addr
+ *   starting address to register.
+ * @param[in] length
+ *   length of region to register
+ * @param[in] lkey_out
+ *   pointer to uint32_t to store resulting lkey of region.
+ *
+ * @return
+ *   pointer to ibv_mr if registration was successful; NULL if not.
+ */
+__rte_experimental
+void *rte_pmd_mlx5_manual_reg_mr(uint8_t port_id, void *addr, size_t length, uint32_t *lkey_out);
+
+/**
+ * Dynamically register a region with NIC.
+ * Writes resulting lkey into lkey_out pointer.
+ * @param[in] ibv_mr
+ *   Pointer to ibv_mr for deregistration.
+ */
+__rte_experimental
+void rte_pmd_mlx5_manual_dereg_mr(void *ibv_mr);
+
 /**
  * Update mapping between rte_flow queue index (16 bits) and HW queue index (32
  * bits) for RxQs which is created outside the PMD.
diff --git a/drivers/net/mlx5/version.map b/drivers/net/mlx5/version.map
index c97dfe440a..3dcac9644b 100644
--- a/drivers/net/mlx5/version.map
+++ b/drivers/net/mlx5/version.map
@@ -5,6 +5,9 @@ DPDK_22 {
 EXPERIMENTAL {
 	global:
 
+	# added for patch for manual reg and dereg
+	rte_pmd_mlx5_manual_reg_mr;
+	rte_pmd_mlx5_manual_dereg_mr;
 	# added in 20.02
 	rte_pmd_mlx5_get_dyn_flag_names;
 	# added in 20.11
diff --git a/lib/mempool/rte_mempool.h b/lib/mempool/rte_mempool.h
index 3ada37cb86..a9d209ca85 100644
--- a/lib/mempool/rte_mempool.h
+++ b/lib/mempool/rte_mempool.h
@@ -642,6 +642,12 @@ int rte_mempool_op_populate_default(struct rte_mempool *mp,
 typedef int (*rte_mempool_get_info_t)(const struct rte_mempool *mp,
 		struct rte_mempool_info *info);
 
+/**
+ * Run an additional callback when objects are put back into the cache or
+ * enqueued.
+ */
+typedef int (*rte_mempool_obj_free_t)(void *const *obj_table, unsigned int n);
+
 
 /** Structure defining mempool operations structure */
 struct rte_mempool_ops {
@@ -669,6 +675,11 @@ struct rte_mempool_ops {
 	 * Dequeue a number of contiguous object blocks.
 	 */
 	rte_mempool_dequeue_contig_blocks_t dequeue_contig_blocks;
+	/**
+	 * Optional callback to define how to free items before adding items to
+     * cache.
+	 */
+	rte_mempool_obj_free_t obj_free;
 } __rte_cache_aligned;
 
 #define RTE_MEMPOOL_MAX_OPS_IDX 16  /**< Max registered ops structs */
@@ -804,6 +815,30 @@ rte_mempool_ops_enqueue_bulk(struct rte_mempool *mp, void * const *obj_table,
 	return ops->enqueue(mp, obj_table, n);
 }
 
+/**
+ * @internal Wrapper for mempool_ops obj_free callback.
+ *
+ * @param[in] mp
+ *   Pointer to the memory pool.
+ * @param[out] first_obj_table
+ *   Pointer to a table of void * pointers (first objects).
+ * @param[in] n
+ *   Number of blocks to get.
+ * @return
+ *   - 0: Success; got n objects.
+ *   - <0: Error; code of dequeue function.
+ */
+static inline int
+rte_mempool_ops_obj_free_bulk(struct rte_mempool *mp, void *const *obj_table, unsigned n)
+{
+    struct rte_mempool_ops *ops;
+    ops = rte_mempool_get_ops(mp->ops_index);
+    if (ops->obj_free != NULL) {
+        return ops->obj_free(obj_table, n);
+    }
+    return 0;
+}
+
 /**
  * @internal wrapper for mempool_ops get_count callback.
  *
@@ -1391,6 +1426,8 @@ static __rte_always_inline void
 rte_mempool_generic_put(struct rte_mempool *mp, void * const *obj_table,
 			unsigned int n, struct rte_mempool_cache *cache)
 {
+	/* Call user-defined free callback. */
+	rte_mempool_ops_obj_free_bulk(mp, obj_table, n);
 	rte_mempool_trace_generic_put(mp, obj_table, n, cache);
 	RTE_MEMPOOL_CHECK_COOKIES(mp, obj_table, n, 0);
 	rte_mempool_do_generic_put(mp, obj_table, n, cache);
diff --git a/lib/mempool/rte_mempool_ops.c b/lib/mempool/rte_mempool_ops.c
index 2d36dee8f0..3fe165e142 100644
--- a/lib/mempool/rte_mempool_ops.c
+++ b/lib/mempool/rte_mempool_ops.c
@@ -64,6 +64,7 @@ rte_mempool_register_ops(const struct rte_mempool_ops *h)
 	ops->populate = h->populate;
 	ops->get_info = h->get_info;
 	ops->dequeue_contig_blocks = h->dequeue_contig_blocks;
+	ops->obj_free = h->obj_free;
 
 	rte_spinlock_unlock(&rte_mempool_ops_table.sl);
 
