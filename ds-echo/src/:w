use super::ServerCerealizeMessage;
use color_eyre::eyre::{Result, WrapErr};
use cornflakes_libos::{
    datapath::{Datapath, PushBufType, ReceivedPkt},
    state_machine::server::ServerSM,
    ConnID, MsgID, OrderedSga, RcSga, RcSge, Sga, Sge,
};
use std::marker::PhantomData;

pub struct EchoServer<S, D> {
    serializer: S,
    push_mode: PushBufType,
    echo_pkt_mode: bool,
    reuse_ctx: bool,
    reused_sga_ctx: Vec<S::SgaCtx>,
    reused_rcsga_ctx: Vec<S::RcSgaCtx>,
    reused_buf_ctx: Vec<S::SingleBufCtx>,
    _marker: PhantomData<D>,
}

impl<S, D> EchoServer<S, D>
where
    S: CerealizeMessage<D>,
    D: Datapath,
{
    pub fn new(serializer: S) -> EchoServer<S, D> {
        EchoServer {
            serializer: serializer,
            echo_pkt_mode: false,
            _marker: PhantomData,
        }
    }

    pub fn set_echo_pkt_mode(&mut self) {
        self.echo_pkt_mode = true;
    }
}

impl<S, D> ServerSM for EchoServer<S, D>
where
    S: CerealizeMessage<D>,
    D: Datapath,
{
    type Datapath = D;

    fn init(&mut self, connection: &mut Self::Datapath) -> Result<()> {
        let mut buf_size = 256;
        let max_size = 8192;
        let min_elts = 8192;
        loop {
            // add a tx pool with buf size
            tracing::info!("Adding memory pool of size {}", buf_size);
            connection.add_memory_pool(buf_size, min_elts)?;
            buf_size *= 2;
            if buf_size > max_size {
                break;
            }
        }
        Ok(())
    }

    fn cleanup(&mut self, _connection: &mut Self::Datapath) -> Result<()> {
        Ok(())
    }

    fn process_requests_single_buf(
        &mut self,
        pkts: Vec<ReceivedPkt<<Self as ServerSM>::Datapath>>,
        datapath: &mut Self::Datapath,
    ) -> Result<()> {
        Ok(())
    }

    fn process_requests_rc_sga(
        &mut self,
        pkts: Vec<RecievedPkt<<Self as ServerSM>::Datapath>>,
        datapath: &mut Self::Datapath,
    ) -> Result<()> {
        if self.reuse_ctx {
            for (pkt, rcsga_ctx) in pkts
                .iter()
                .zip(self.reused_sga_ctx.iter_mut().take(pkts.len()))
            {
                self.serializer.process_request_rcsga(pkt, &mut rcsga_ctx)?;
            }
        } else {
            let mut out_contexts = self.serializer.new_rcsga_ctx_vec(pkts.len());
            for (pkt, rcsga_ctx) in pkts.iter().zip(out_context.iter_mut()) {
                self.serializer.process_request_rcsga(pkt, &mut rcsga_ctx)?;
            }
        }

        Ok(())
    }

    fn process_requests_sga(
        &mut self,
        pkts: Vec<RecievedPkt<<Self as ServerSM>::Datapath>>,
        datapath: &mut Self::Datapath,
    ) -> Result<()> {
        Ok(())
    }
}
